<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">

<<<<<<< HEAD
   <resultMap type="Member" id="member_rm">
      <!-- DB의 기본 키(복합키면 여러 개 작성) -->
      <id property="memberNo" column="MEMBER_NO" />
      <result property="memberEmail" column="MEMBER_EMAIL" />
      <result property="memberPw" column="MEMBER_PW" />
      <result property="memberNickname" column="MEMBER_NICKNAME" />
      <result property="memberRole" column="MEMBER_ROLE" />
      <result property="profileImg" column="PROFILE_IMG" />
      <result property="enrollDate" column="ENROLL_DATE" />
      <result property="disableDate" column="DISABLE_DATE" />
      <result property="deleteDate" column="DELETE_DATE" />
      <result property="memberCondition" column="MEMBER_CONDITION" />
      <result property="setAlarmReply" column="SET_AL_REPLY" />
      <result property="setAlarmLike" column="SET_AL_LIKE" />
   </resultMap>


	<select id="login" parameterType="Member" resultMap="member_rm">
		SELECT MEMBER_NO,MEMBER_EMAIL,MEMBER_PW,MEMBER_NICKNAME,PROFILE_IMG,
		TO_CHAR(ENROLL_DATE, 'YYYY"년" MM"월" DD"일" HH24"시"
		MI"분" SS"초"')
		FROM MEMBER
		WHERE MEMBER_CONDITION = 'N'
		AND MEMBER_EMAIL = #{memberEmail}
	</select>
	
	<insert id="joinUp" parameterType="member">
	INSERT INTO "MEMBER"
	VALUES(SEQ_MEMBER_NO.NEXTVAL, #{memberEmail}, #{memberPw}
	, '${memberNickname}')
		
	</insert>
	
=======
	<!--mapper 파일 생성 시 아래 태그 반드시 삭제! -->
	<!-- <cache-ref namespace=""/> -->

	<!-- resultMap - SELECT 조회 결과(ResultSet) 컬럼명과 컬럼 값을 옮겨 담을 DTO의 필드명이 같지 않을 
		때 이를 매핑 시켜 SELECT시 자동으로 담기게하는 역할 -속성 type : 연결할 VO (패키지명 + 클래스명 또는 별칭) id 
		: 만들어진 resultMap을 지칭할 식별명(이름) <id> 태그 : PK 역할 컬럼 - 필드 매핑 <result> 태그 : <id>제외 
		나머지 -->

	<resultMap type="Member" id="member_rm">
		<!-- DB의 기본 키(복합키면 여러 개 작성) -->
		<id property="memberNo" column="MEMBER_NO" />

		<!-- DB의 일반 컬럼들 -->
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberPw" column="MEMBER_PW" />
		<result property="memberNickname" column="MEMBER_NICKNAME" />
		<result property="memberRole" column="MEMBER_ROLE" />
		<result property="profileImg" column="PROFILE_IMG" />
		<result property="enrollDate" column="ENROLL_DATE" />
		<result property="disableDate" column="DISABLE_DATE" />
		<result property="deleteDate" column="DELETE_DATE" />
		<result property="memberCondition" column="MEMBER_CONDITION" />
		<result property="setAlarmReply" column="SET_AL_REPLY" />
		<result property="setAlarmLike" column="SET_AL_LIKE" />
	</resultMap>




	<!-- SQL 관련 태그의 속성 - parameterType : 전달받은 값의 자료형 기본 : 패키지명 + 클래스명 별칭 : Mybatis 
		별칭 또는 사용자 지정 별칭 - parameterMap : (사용 안함) - resultType : select 결과를 담아서 반환할 
		자료형 단, DTO를 작성할 경우 필드명 = 컬럼명 경우만 가능 memberNo = Member_NO 달라 사용 불가 - resultMap 
		: select 결과의 컬럼명과 결과를 저장할 DTO 필드명이 다를경우 이를 알맞게 매핑(연결)시켜주는 <resultMap> id 
		작성 -->

	<!-- *** 마이바티스에서 전달 받은 값을 SQL에 작성하는 방법 *** #{변수명|필드명} : PreparedStatement 
		: SQL에 값 대입 시 양쪽에 ''붙여서 대입 ${변수명|필드명} : Statement : SQL 값 대입시 양쪽에 아무것도 붙이지 
		않음 사용 예시 ) test1 = "user01" test2 = MEMBER_EMAIL - MEMBER_EMAIL이 'user 01' 
		인 회원 조회 SELECT * FROM MEMBER WHERE MEMBER_EMAIL = #{test1} -->



	
	<!-- <select id="login" parameterType="edu.kh.project.member.model.dto.Member"> -->
	<!-- 로그인 -->
	<select id="login" parameterType="Member" resultMap="member_rm">
		SELECT
			MEMBER_NO, MEMBER_EMAIL, MEMBER_PW, MEMBER_NICKNAME, PROFILE_IMG,
			TO_CHAR(ENROLL_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"')
		FROM "MEMBER"
		WHERE MEMBER_CONDITION = 'N'
		AND MEMBER_EMAIL = #{memberEmail}
	</select>
>>>>>>> origin/정송이


	<!-- insert, update , delete와 같은 DML구문은 수행 결과가 항상 성공한 행의 개수 (int 자료형)으로 
		고정! -> resultType을 작성하지 않는다 ! -->

	<!-- 회원 가입 -->



</mapper>